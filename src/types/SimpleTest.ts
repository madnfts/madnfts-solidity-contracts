/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace FactoryTypes {
  export type CollectionArgsStruct = {
    _name: string;
    _symbol: string;
    _baseURI: string;
    _price: BigNumberish;
    _maxSupply: BigNumberish;
    _splitter: AddressLike;
    _royaltyPercentage: BigNumberish;
    _router: AddressLike;
    _erc20: AddressLike;
    _owner: AddressLike;
  };

  export type CollectionArgsStructOutput = [
    _name: string,
    _symbol: string,
    _baseURI: string,
    _price: bigint,
    _maxSupply: bigint,
    _splitter: string,
    _royaltyPercentage: bigint,
    _router: string,
    _erc20: string,
    _owner: string
  ] & {
    _name: string;
    _symbol: string;
    _baseURI: string;
    _price: bigint;
    _maxSupply: bigint;
    _splitter: string;
    _royaltyPercentage: bigint;
    _router: string;
    _erc20: string;
    _owner: string;
  };
}

export interface SimpleTestInterface extends Interface {
  getFunction(nameOrSignature: "name" | "params"): FunctionFragment;

  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "params", values?: undefined): string;

  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "params", data: BytesLike): Result;
}

export interface SimpleTest extends BaseContract {
  connect(runner?: ContractRunner | null): SimpleTest;
  waitForDeployment(): Promise<this>;

  interface: SimpleTestInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  name: TypedContractMethod<[], [string], "view">;

  params: TypedContractMethod<
    [],
    [
      [
        string,
        string,
        string,
        bigint,
        bigint,
        string,
        bigint,
        string,
        string,
        string
      ] & {
        _name: string;
        _symbol: string;
        _baseURI: string;
        _price: bigint;
        _maxSupply: bigint;
        _splitter: string;
        _royaltyPercentage: bigint;
        _router: string;
        _erc20: string;
        _owner: string;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "params"
  ): TypedContractMethod<
    [],
    [
      [
        string,
        string,
        string,
        bigint,
        bigint,
        string,
        bigint,
        string,
        string,
        string
      ] & {
        _name: string;
        _symbol: string;
        _baseURI: string;
        _price: bigint;
        _maxSupply: bigint;
        _splitter: string;
        _royaltyPercentage: bigint;
        _router: string;
        _erc20: string;
        _owner: string;
      }
    ],
    "view"
  >;

  filters: {};
}
