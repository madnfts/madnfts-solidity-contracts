/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  FunctionFragment,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
} from "../../../common";

export interface ImplBaseEventsAndErrorsInterface extends Interface {
  getEvent(
    nameOrSignatureOrTopic:
      | "BaseURILocked"
      | "BaseURISet"
      | "PublicMintStateSet"
      | "RoyaltyFeeSet"
      | "RoyaltyRecipientSet"
  ): EventFragment;
}

export namespace BaseURILockedEvent {
  export type InputTuple = [baseURI: string];
  export type OutputTuple = [baseURI: string];
  export interface OutputObject {
    baseURI: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BaseURISetEvent {
  export type InputTuple = [newBaseURI: string];
  export type OutputTuple = [newBaseURI: string];
  export interface OutputObject {
    newBaseURI: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PublicMintStateSetEvent {
  export type InputTuple = [newPublicState: boolean];
  export type OutputTuple = [newPublicState: boolean];
  export interface OutputObject {
    newPublicState: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoyaltyFeeSetEvent {
  export type InputTuple = [newRoyaltyFee: BigNumberish];
  export type OutputTuple = [newRoyaltyFee: bigint];
  export interface OutputObject {
    newRoyaltyFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoyaltyRecipientSetEvent {
  export type InputTuple = [newRecipient: AddressLike];
  export type OutputTuple = [newRecipient: string];
  export interface OutputObject {
    newRecipient: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ImplBaseEventsAndErrors extends BaseContract {
  connect(runner?: ContractRunner | null): ImplBaseEventsAndErrors;
  waitForDeployment(): Promise<this>;

  interface: ImplBaseEventsAndErrorsInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getEvent(
    key: "BaseURILocked"
  ): TypedContractEvent<
    BaseURILockedEvent.InputTuple,
    BaseURILockedEvent.OutputTuple,
    BaseURILockedEvent.OutputObject
  >;
  getEvent(
    key: "BaseURISet"
  ): TypedContractEvent<
    BaseURISetEvent.InputTuple,
    BaseURISetEvent.OutputTuple,
    BaseURISetEvent.OutputObject
  >;
  getEvent(
    key: "PublicMintStateSet"
  ): TypedContractEvent<
    PublicMintStateSetEvent.InputTuple,
    PublicMintStateSetEvent.OutputTuple,
    PublicMintStateSetEvent.OutputObject
  >;
  getEvent(
    key: "RoyaltyFeeSet"
  ): TypedContractEvent<
    RoyaltyFeeSetEvent.InputTuple,
    RoyaltyFeeSetEvent.OutputTuple,
    RoyaltyFeeSetEvent.OutputObject
  >;
  getEvent(
    key: "RoyaltyRecipientSet"
  ): TypedContractEvent<
    RoyaltyRecipientSetEvent.InputTuple,
    RoyaltyRecipientSetEvent.OutputTuple,
    RoyaltyRecipientSetEvent.OutputObject
  >;

  filters: {
    "BaseURILocked(string)": TypedContractEvent<
      BaseURILockedEvent.InputTuple,
      BaseURILockedEvent.OutputTuple,
      BaseURILockedEvent.OutputObject
    >;
    BaseURILocked: TypedContractEvent<
      BaseURILockedEvent.InputTuple,
      BaseURILockedEvent.OutputTuple,
      BaseURILockedEvent.OutputObject
    >;

    "BaseURISet(string)": TypedContractEvent<
      BaseURISetEvent.InputTuple,
      BaseURISetEvent.OutputTuple,
      BaseURISetEvent.OutputObject
    >;
    BaseURISet: TypedContractEvent<
      BaseURISetEvent.InputTuple,
      BaseURISetEvent.OutputTuple,
      BaseURISetEvent.OutputObject
    >;

    "PublicMintStateSet(bool)": TypedContractEvent<
      PublicMintStateSetEvent.InputTuple,
      PublicMintStateSetEvent.OutputTuple,
      PublicMintStateSetEvent.OutputObject
    >;
    PublicMintStateSet: TypedContractEvent<
      PublicMintStateSetEvent.InputTuple,
      PublicMintStateSetEvent.OutputTuple,
      PublicMintStateSetEvent.OutputObject
    >;

    "RoyaltyFeeSet(uint256)": TypedContractEvent<
      RoyaltyFeeSetEvent.InputTuple,
      RoyaltyFeeSetEvent.OutputTuple,
      RoyaltyFeeSetEvent.OutputObject
    >;
    RoyaltyFeeSet: TypedContractEvent<
      RoyaltyFeeSetEvent.InputTuple,
      RoyaltyFeeSetEvent.OutputTuple,
      RoyaltyFeeSetEvent.OutputObject
    >;

    "RoyaltyRecipientSet(address)": TypedContractEvent<
      RoyaltyRecipientSetEvent.InputTuple,
      RoyaltyRecipientSetEvent.OutputTuple,
      RoyaltyRecipientSetEvent.OutputObject
    >;
    RoyaltyRecipientSet: TypedContractEvent<
      RoyaltyRecipientSetEvent.InputTuple,
      RoyaltyRecipientSetEvent.OutputTuple,
      RoyaltyRecipientSetEvent.OutputObject
    >;
  };
}
