/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  FunctionFragment,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
} from "../../common";

export interface FactoryEventsAndErrorsBaseInterface extends Interface {
  getEvent(
    nameOrSignatureOrTopic:
      | "CollectionCreated"
      | "CollectionTypeAdded"
      | "FeesUpdated(uint256,uint256)"
      | "FeesUpdated(uint256,uint256,address)"
      | "PaymentTokenUpdated"
      | "RecipientUpdated"
      | "RouterUpdated"
      | "SplitterCreated"
  ): EventFragment;
}

export namespace CollectionCreatedEvent {
  export type InputTuple = [
    newSplitter: AddressLike,
    newCollection: AddressLike,
    collectionName: string,
    collectionSymbol: string,
    royalties: BigNumberish,
    maxSupply: BigNumberish,
    mintPrice: BigNumberish,
    tokenType: BigNumberish,
    collectionToken: AddressLike
  ];
  export type OutputTuple = [
    newSplitter: string,
    newCollection: string,
    collectionName: string,
    collectionSymbol: string,
    royalties: bigint,
    maxSupply: bigint,
    mintPrice: bigint,
    tokenType: bigint,
    collectionToken: string
  ];
  export interface OutputObject {
    newSplitter: string;
    newCollection: string;
    collectionName: string;
    collectionSymbol: string;
    royalties: bigint;
    maxSupply: bigint;
    mintPrice: bigint;
    tokenType: bigint;
    collectionToken: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CollectionTypeAddedEvent {
  export type InputTuple = [index: BigNumberish];
  export type OutputTuple = [index: bigint];
  export interface OutputObject {
    index: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FeesUpdated_uint256_uint256_Event {
  export type InputTuple = [feeVal2: BigNumberish, feeVal3: BigNumberish];
  export type OutputTuple = [feeVal2: bigint, feeVal3: bigint];
  export interface OutputObject {
    feeVal2: bigint;
    feeVal3: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FeesUpdated_uint256_uint256_address_Event {
  export type InputTuple = [
    feeVal2: BigNumberish,
    feeVal3: BigNumberish,
    erc20Token: AddressLike
  ];
  export type OutputTuple = [
    feeVal2: bigint,
    feeVal3: bigint,
    erc20Token: string
  ];
  export interface OutputObject {
    feeVal2: bigint;
    feeVal3: bigint;
    erc20Token: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PaymentTokenUpdatedEvent {
  export type InputTuple = [newPaymentToken: AddressLike];
  export type OutputTuple = [newPaymentToken: string];
  export interface OutputObject {
    newPaymentToken: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RecipientUpdatedEvent {
  export type InputTuple = [newRecipient: AddressLike];
  export type OutputTuple = [newRecipient: string];
  export interface OutputObject {
    newRecipient: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RouterUpdatedEvent {
  export type InputTuple = [newRouter: AddressLike];
  export type OutputTuple = [newRouter: string];
  export interface OutputObject {
    newRouter: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SplitterCreatedEvent {
  export type InputTuple = [
    creator: AddressLike,
    shares: BigNumberish[],
    payees: AddressLike[],
    splitter: AddressLike,
    flag: BigNumberish
  ];
  export type OutputTuple = [
    creator: string,
    shares: bigint[],
    payees: string[],
    splitter: string,
    flag: bigint
  ];
  export interface OutputObject {
    creator: string;
    shares: bigint[];
    payees: string[];
    splitter: string;
    flag: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface FactoryEventsAndErrorsBase extends BaseContract {
  connect(runner?: ContractRunner | null): FactoryEventsAndErrorsBase;
  waitForDeployment(): Promise<this>;

  interface: FactoryEventsAndErrorsBaseInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getEvent(
    key: "CollectionCreated"
  ): TypedContractEvent<
    CollectionCreatedEvent.InputTuple,
    CollectionCreatedEvent.OutputTuple,
    CollectionCreatedEvent.OutputObject
  >;
  getEvent(
    key: "CollectionTypeAdded"
  ): TypedContractEvent<
    CollectionTypeAddedEvent.InputTuple,
    CollectionTypeAddedEvent.OutputTuple,
    CollectionTypeAddedEvent.OutputObject
  >;
  getEvent(
    key: "FeesUpdated(uint256,uint256)"
  ): TypedContractEvent<
    FeesUpdated_uint256_uint256_Event.InputTuple,
    FeesUpdated_uint256_uint256_Event.OutputTuple,
    FeesUpdated_uint256_uint256_Event.OutputObject
  >;
  getEvent(
    key: "FeesUpdated(uint256,uint256,address)"
  ): TypedContractEvent<
    FeesUpdated_uint256_uint256_address_Event.InputTuple,
    FeesUpdated_uint256_uint256_address_Event.OutputTuple,
    FeesUpdated_uint256_uint256_address_Event.OutputObject
  >;
  getEvent(
    key: "PaymentTokenUpdated"
  ): TypedContractEvent<
    PaymentTokenUpdatedEvent.InputTuple,
    PaymentTokenUpdatedEvent.OutputTuple,
    PaymentTokenUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "RecipientUpdated"
  ): TypedContractEvent<
    RecipientUpdatedEvent.InputTuple,
    RecipientUpdatedEvent.OutputTuple,
    RecipientUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "RouterUpdated"
  ): TypedContractEvent<
    RouterUpdatedEvent.InputTuple,
    RouterUpdatedEvent.OutputTuple,
    RouterUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "SplitterCreated"
  ): TypedContractEvent<
    SplitterCreatedEvent.InputTuple,
    SplitterCreatedEvent.OutputTuple,
    SplitterCreatedEvent.OutputObject
  >;

  filters: {
    "CollectionCreated(address,address,string,string,uint256,uint256,uint256,uint8,address)": TypedContractEvent<
      CollectionCreatedEvent.InputTuple,
      CollectionCreatedEvent.OutputTuple,
      CollectionCreatedEvent.OutputObject
    >;
    CollectionCreated: TypedContractEvent<
      CollectionCreatedEvent.InputTuple,
      CollectionCreatedEvent.OutputTuple,
      CollectionCreatedEvent.OutputObject
    >;

    "CollectionTypeAdded(uint256)": TypedContractEvent<
      CollectionTypeAddedEvent.InputTuple,
      CollectionTypeAddedEvent.OutputTuple,
      CollectionTypeAddedEvent.OutputObject
    >;
    CollectionTypeAdded: TypedContractEvent<
      CollectionTypeAddedEvent.InputTuple,
      CollectionTypeAddedEvent.OutputTuple,
      CollectionTypeAddedEvent.OutputObject
    >;

    "FeesUpdated(uint256,uint256)": TypedContractEvent<
      FeesUpdated_uint256_uint256_Event.InputTuple,
      FeesUpdated_uint256_uint256_Event.OutputTuple,
      FeesUpdated_uint256_uint256_Event.OutputObject
    >;
    "FeesUpdated(uint256,uint256,address)": TypedContractEvent<
      FeesUpdated_uint256_uint256_address_Event.InputTuple,
      FeesUpdated_uint256_uint256_address_Event.OutputTuple,
      FeesUpdated_uint256_uint256_address_Event.OutputObject
    >;

    "PaymentTokenUpdated(address)": TypedContractEvent<
      PaymentTokenUpdatedEvent.InputTuple,
      PaymentTokenUpdatedEvent.OutputTuple,
      PaymentTokenUpdatedEvent.OutputObject
    >;
    PaymentTokenUpdated: TypedContractEvent<
      PaymentTokenUpdatedEvent.InputTuple,
      PaymentTokenUpdatedEvent.OutputTuple,
      PaymentTokenUpdatedEvent.OutputObject
    >;

    "RecipientUpdated(address)": TypedContractEvent<
      RecipientUpdatedEvent.InputTuple,
      RecipientUpdatedEvent.OutputTuple,
      RecipientUpdatedEvent.OutputObject
    >;
    RecipientUpdated: TypedContractEvent<
      RecipientUpdatedEvent.InputTuple,
      RecipientUpdatedEvent.OutputTuple,
      RecipientUpdatedEvent.OutputObject
    >;

    "RouterUpdated(address)": TypedContractEvent<
      RouterUpdatedEvent.InputTuple,
      RouterUpdatedEvent.OutputTuple,
      RouterUpdatedEvent.OutputObject
    >;
    RouterUpdated: TypedContractEvent<
      RouterUpdatedEvent.InputTuple,
      RouterUpdatedEvent.OutputTuple,
      RouterUpdatedEvent.OutputObject
    >;

    "SplitterCreated(address,uint256[],address[],address,uint256)": TypedContractEvent<
      SplitterCreatedEvent.InputTuple,
      SplitterCreatedEvent.OutputTuple,
      SplitterCreatedEvent.OutputObject
    >;
    SplitterCreated: TypedContractEvent<
      SplitterCreatedEvent.InputTuple,
      SplitterCreatedEvent.OutputTuple,
      SplitterCreatedEvent.OutputObject
    >;
  };
}
