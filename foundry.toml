[profile.default.fmt]
# These are all the `forge fmt` defaults.
line_length = 80
tab_width = 4
bracket_spacing = true
int_types = 'long'
multiline_func_header = 'attributes_first'
quote_style = 'double'
number_underscore = 'thousands'
single_line_statement_blocks = 'preserve'
wrap_comments=true
ignore = ["src/console.sol", "src/console2.sol"]


# https://book.getfoundry.sh/reference/config/
[profile.default]
src = 'contracts'
out = 'out'
libs = ['node_modules', 'test/lib']
test = 'test/foundry'
gas_limit = "9223372036854775807" # u64::MAX

via_ir = true
optimizer_runs = 0xffffffff
optimizer = true
solc_version = "0.8.22"

    # // Version of the EVM to compile for.
    # // Affects type checking and code generation. Can be homestead,
    # // tangerineWhistle, spuriousDragon, byzantium, constantinople,
    # // petersburg, istanbul, berlin, london, paris or shanghai (default)
# evm_version="shanghai"

# See more config options https://github.com/foundry-rs/foundry/tree/master/config

# [profile.default]
# auto_detect_solc = false
# cbor_metadata = false
# bytecode_hash = "none"
# src = 'contracts'
# out = 'out'
# libs = ['node_modules', 'lib']
# test = 'test/foundry'
# cache_path = 'forge-cache'
# optimizer = true
# optimizer_runs = 100
# via_ir = true
# solc_version = "0.8.22"
# script = "script"

# general test options for forge
# verbosity=4
# ffi=false
# # sender='0x0'
# # tx_origin='0x0'
# # initial_balance='0xffffffffffffffffffffffff'
# block_number=1
# chain_id=31337
# gas_limit = "9223372036854775807" # u64::MAX
# sizes=true # contract size

# extra_output_files = ['evm.assembly', 'ir']
# For a list of valid values, see the [Solidity docs][output-desc].
# extra_output = [
#     "abi",
#     "evm.bytecode",
#     "evm.deployedBytecode",
#     "evm.methodIdentifiers",
# ]

# Foundry will treat Solidity compiler warnings as errors,
# deny_warnings=true
# evm_version="london"
# broadcast='path/to/broadcast'

# https://docs.soliditylang.org/en/latest/using-the-compiler.html#compiler-input-and-output-json-description
# [profile.optimizer_details]
# deduplicate = true
# yul = true
# orderLiterals = true
# cse = true
# constantOptimizer = true

# [profile.ci]
#   fuzz = { runs = 10_000 }
#   verbosity = 4

# [profile.optimizer_details.yul_details]
# stack_allocation = true
# optimizer_steps=''

# [profile.default.rpc_endpoints]
# # The RPC URLs are modified versions of the default for testing initialization.
# mainnet = "https://mainnet.infura.io/v3/b1d3925804e74152b316ca7da97060d3" # Different API key.
# optimism_goerli = "https://goerli.optimism.io/"                           # Adds a trailing slash.
# arbitrum_one_goerli = "https://goerli-rollup.arbitrum.io/rpc/"            # Adds a trailing slash.
# needs_undefined_env_var = "${UNDEFINED_RPC_URL_PLACEHOLDER}"




[profile.default.fuzz]
runs = 1_000
max_test_rejects = 1_000_000 # 65536

# # seed=
# dictionary_weight=40 # set for both fuzz /invariant (only 1 is used)
# include_storage=true # set for both fuzz /invariant (only 1 is used)

# [profile.default.invariant]
# fail_on_revert = false
# runs = 1215
# depth = 23
# call_override=false #Overrides unsafe external calls when running invariant tests, useful for e.g. performing reentrancy checks.



# [profile.default.model_checker]
# engine = 'chc'
# timeout = 10000
# targets = [
#     'assert',
#     'underflow',
#     'overflow',
#     'divByZero',
#     'constantCondition',
#     'popEmptyArray',
#     'outOfBounds',
#     'balance',
# ]
# invariants = ['contract', 'reentrancy']
# show_unproved = true

# # https://docs.soliditylang.org/en/latest/smtchecker.html#smt-and-horn-solvers
# solvers = [
#     'smtlib2',
#     # 'eld',
#     'z3',
#     # 'cvc4'
# ]
# contracts = { 'contracts/Factory/MADFactory1155.sol' = [
#     'MADFactory1155',
# ], 'contracts/Factory/MADFactory721.sol' = [
#     'MADFactory721',
# ], 'contracts/Factory/MADFactoryBase.sol' = [
#     'MADFactoryBase',
# ], 'contracts/lib/auth/FactoryVerifier.sol' = [
#     'FactoryVerifier',
# ], 'contracts/lib/auth/Owned.sol' = [
#     'Owned',
# ], 'contracts/lib/auth/TwoFactor.sol' = [
#     'TwoFactor',
# ], 'contracts/lib/security/DCPrevent.sol' = [
#     'DCPrevent',
# ], 'contracts/lib/security/ReentrancyGuard.sol' = [
#     'ReentrancyGuard',
# ], 'contracts/lib/splitter/SplitterImpl.sol' = [
#     'SplitterImpl',
# ], 'contracts/lib/tokens/ERC20.sol' = [
#     'ERC20',
# ], 'contracts/lib/tokens/common/ERC2981.sol' = [
#     'ERC2981',
# ], 'contracts/lib/tokens/common/FeeOracle.sol' = [
#     'FeeOracle',
# ], 'contracts/lib/tokens/ERC1155/Base/ERC1155.sol' = [
#     'ERC1155',
# ], 'contracts/lib/tokens/ERC1155/Base/utils/ERC1155Holder.sol' = [
#     'ERC1155Holder',
# ], 'contracts/lib/tokens/ERC721/Base/ERC721.sol' = [
#     'ERC721',
# ],'contracts/lib/tokens/ERC721/Base/utils/ERC721Holder.sol' = [
#     'ERC721Holder',
# ], 'contracts/lib/utils/CREATE3.sol' = [
#     'CREATE3',
# ], 'contracts/lib/utils/SafeTransferLib.sol' = [
#     'SafeTransferLib',
# ], 'contracts/lib/splitter/SplitterBufferLib.sol' = [
#     'SplitterBufferLib',
# ], 'contracts/lib/utils/Strings.sol' = [
#     'Strings',
# ], 'contracts/MADTokens/common/ImplBase.sol' = [
#     'ImplBase',
# ], 'contracts/MADTokens/common/PaymentManager.sol' = [
#     'PaymentManager',
# ],  'contracts/MADTokens/ERC1155/ERC1155Basic.sol' = [
#     'ERC1155Basic',
# ], 'contracts/MADTokens/ERC721/ERC721Basic.sol' = [
#     'ERC721Basic',
# ], 'contracts/Marketplace/MADMarketplace1155.sol' = [
#     'MADMarketplace1155',
# ], 'contracts/Marketplace/MADMarketplace721.sol' = [
#     'MADMarketplace721',
# ], 'contracts/Marketplace/MADMarketplaceBase.sol' = [
#     'MADMarketplaceBase',
# ], 'contracts/Router/MADRouter1155.sol' = [
#     'MADRouter1155',
# ], 'contracts/Router/MADRouter721.sol' = [
#     'MADRouter721',
# ], 'contracts/Router/MADRouterBase.sol' = [
#     'MADRouterBase',
# ],  'contracts/Shared/MADBase.sol' = [
#     'MADBase',
# ] }
